before:
  this_module = 'posix.sys.socket'
  global_table = '_G'

  M = require(this_module)


specify posix.sys.socket:
- context when required:
  - it does not touch the global table:
      expect(show_apis {added_to=global_table, by=this_module}).
         to_equal {}


- describe socket:
  - context with bad arguments:
      badargs.diagnose(M.socket, "(int, int, int)")


- describe socketpair:
  - context with bad arguments:
      badargs.diagnose(M.socketpair, "(int, int, int)")


- describe getaddrinfo:
  - before:
      getaddrinfo, typeerrors = init(M, "getaddrinfo")

  - context with bad arguments: |
      badargs.diagnose(getaddrinfo, "(?string, ?string|int, ?table)")

      examples {
         ["it diagnoses unspecified host and service"] = function()
            expect(getaddrinfo()).to_raise.
               any_of(typeerrors(2, "string or int"))
         end
      }
      examples {
         ["it diagnoses invalid hints fields"] = function()
            expect(getaddrinfo("localhost", nil, {
               protacol=M.IPPROTO_TCP
            })).to_raise.any_of(typeerrors(3, nil, "protacol"))
            expect(getaddrinfo("localhost", nil, {
               family=M.AF_INET, sacktype=M.SOCK_DGRAM, protocol=M.IPPROTO_TCP,
            })).to_raise.any_of(typeerrors(3, nil, "sacktype"))
         end
      }
      examples {
         ["it diagnoses wrong hints field types"] = function()
            expect(getaddrinfo("localhost", nil, {
               family=false,
            })).to_raise.any_of(typeerrors(3, "int", "family", "boolean"))
            expect(getaddrinfo("localhost", nil, {
               family=M.AF_INET, socktype=false,
            })).to_raise.any_of(typeerrors(3, "int", "socktype", "boolean"))
            expect(getaddrinfo("localhost", nil, {
               family=M.AF_INET, socktype=M.SOCK_DGRAM, protocol=false,
            })).to_raise.any_of(typeerrors(3, "int", "protocol", "boolean"))
            expect(getaddrinfo("localhost", nil, {
               family=M.AF_INET, socktype=M.SOCK_DGRAM, protocol=M.IPPROTO_TCP, flags=false,
            })).to_raise.any_of(typeerrors(3, "int", "flags", "boolean"))
         end
      }


- describe connect:
  - before:
      connect, typeerrors = init(M, "connect")

  - context with bad arguments: |
      badargs.diagnose(connect, "(int, table)")

      examples {
         ["it diagnoses wrong family types"] = function()
            expect(connect(42, {family=false})).
               to_raise.any_of(typeerrors(2, "int", "family", "boolean"))
            expect(connect(42, {family=-1})).to_raise.any_of {
               "bad argument #2 to 'connect' (unsupported family type -1)",
               "bad argument #2 to '?' (unsupported family type -1)",
            }
         end
      }
      examples {
         ["it diagnoses wrong AF_INET field types"] = function()
            expect(connect(42, {family=M.AF_INET, port=false})).
               to_raise.any_of(typeerrors(2, "int", "port", "boolean"))
            expect(connect(42, {family=M.AF_INET, port=9999, addr=false})).
               to_raise.any_of(typeerrors(2, "string", "addr", "boolean"))
          end
      }
      examples {
         ["it diagnoses invalid AF_INET fields"] = function()
            expect(connect(42, {
               family=M.AF_INET, port=9999, addr="127.0.0.1", flags=false
            })).to_raise.any_of(typeerrors(2, nil, "flags"))
         end
      }
      examples {
         ["it diagnoses wrong AF_INET6 field types"] = function()
            expect(connect(42, {family = M.AF_INET6, port = false})).
               to_raise.any_of(typeerrors(2, "int", "port", "boolean"))
            expect(connect(42, {family = M.AF_INET6, port = 9999, addr = false})).
               to_raise.any_of(typeerrors(2, "string", "addr", "boolean"))
         end
      }
      examples {
         ["it diagnoses invalid AF_INET6 fields"] = function()
            expect(connect(42, {
               family=M.AF_INET6, port=9999, addr="::", flags=false
            })).to_raise.any_of(typeerrors(2, nil, "flags"))
         end
      }
      examples {
         ["it diagnoses wrong AF_UNIX field types"] = function()
            expect(connect(42, {family = M.AF_UNIX, path = false})).
               to_raise.any_of(typeerrors(2, "string", "path", "boolean"))
         end
      }
      examples {
         ["it diagnoses invalid AF_UNIX fields"] = function()
            expect(connect(42, {family=M.AF_UNIX, path="/tmp/afunix", port=9999})).
               to_raise.any_of(typeerrors(2, nil, "port"))
         end
      }
      if M.AF_NETLINK then
         examples {
            ["it diagnoses wrong AF_NETLINK field types"] = function()
               expect(connect(42, {family = M.AF_NETLINK, pid = false})).
                  to_raise.any_of(typeerrors(2, "int", "pid", "boolean"))
               expect(connect(42, {family = M.AF_NETLINK, pid = 9999, groups = false})).
                  to_raise.any_of(typeerrors(2, "int", "groups", "boolean"))
            end
         }
         examples {
            ["it diagnoses invalid AF_NETLINK fields"] = function()
               expect(connect(42, {family=M.AF_NETLINK, pid=9999, groups=9999, port=9999})).
                  to_raise.any_of(typeerrors(2, nil, "port"))
            end
         }
      end


- describe bind:
  - before:
      bind, typeerrors = init(M, "bind")

  - context with bad arguments: |
      badargs.diagnose(bind, "(int, table)")

      examples {
         ["it diagnoses wrong family types"] = function()
            expect(bind(42, {family=false})).
               to_raise.any_of(typeerrors(2, "int", "family", "boolean"))
            expect(bind(42, {family=-1})).to_raise.any_of {
               "bad argument #2 to '?' (unsupported family type -1)",
               "bad argument #2 to 'bind' (unsupported family type -1)",
            }
         end
      }
      examples {
         ["it diagnoses wrong AF_INET field types"] = function()
            expect(bind(42, {family=M.AF_INET, port=false})).
               to_raise.any_of(typeerrors(2, "int", "port", "boolean"))
            expect(bind(42, {family=M.AF_INET, port=9999, addr=false})).
               to_raise.any_of(typeerrors(2, "string", "addr", "boolean"))
         end
      }
      examples {
         ["it diagnoses invalid AF_INET fields"] = function()
            expect(bind(42, {
               family=M.AF_INET, port=9999, addr="127.0.0.1", flags=false
            })).to_raise.any_of(typeerrors(2, nil, "flags"))
         end
      }
      examples {
         ["it diagnoses wrong AF_INET6 field types"] = function()
            expect(bind(42, {family = M.AF_INET6, port = false})).
               to_raise.any_of(typeerrors(2, "int", "port", "boolean"))
            expect(bind(42, {family = M.AF_INET6, port = 9999, addr = false})).
               to_raise.any_of(typeerrors(2, "string", "addr", "boolean"))
         end
      }
      examples {
         ["it diagnoses invalid AF_INET6 fields"] = function()
            expect(bind(42, {
               family=M.AF_INET6, port=9999, addr="::", flags=false
            })).to_raise.any_of(typeerrors(2, nil, "flags"))
         end
      }
      examples {
         ["it diagnoses wrong AF_UNIX field types"] = function()
            expect(bind(42, {family = M.AF_UNIX, path = false})).
               to_raise.any_of(typeerrors(2, "string", "path", "boolean"))
         end
      }
      examples {
         ["it diagnoses invalid AF_UNIX fields"] = function()
            expect(bind(42, {family=M.AF_UNIX, path="/tmp/afunix", port=9999})).
               to_raise.any_of(typeerrors(2, nil, "port"))
         end
      }
      if M.AF_NETLINK then
         examples {
            ["it diagnoses wrong AF_NETLINK field types"] = function()
               expect(bind(42, {family = M.AF_NETLINK, pid = false})).
                  to_raise.any_of(typeerrors(2, "int", "pid", "boolean"))
               expect(bind(42, {family = M.AF_NETLINK, pid = 9999, groups = false})).
                  to_raise.any_of(typeerrors(2, "int", "groups", "boolean"))
            end
         }
         examples {
            ["it diagnoses invalid AF_NETLINK fields"] = function()
               expect(bind(42, {family=M.AF_NETLINK, pid=9999, groups=9999, port=9999})).
                  to_raise.any_of(typeerrors(2, nil, "port"))
            end
         }
      end


- describe listen:
  - context with bad arguments:
      badargs.diagnose(M.listen, "(int, int)")


- describe accept:
  - context with bad arguments:
      badargs.diagnose(M.accept, "(int)")


- describe recv:
  - context with bad arguments:
      badargs.diagnose(M.recv, "(int, int)")


- describe recvfrom:
  - context with bad arguments:
      badargs.diagnose(M.recvfrom, "(int, int)")


- describe send:
  - context with bad arguments:
      badargs.diagnose(M.send, "(int, string)")


- describe sendto:
  - before:
      sendto, typeerrors = init(M, "sendto")

  - context with bad arguments: |
      badargs.diagnose(sendto, "(int, string, table)")

      examples {
         ["it diagnoses wrong family types"] = function()
            expect(sendto(42, "msg", {family=false})).
               to_raise.any_of(typeerrors(3, "int", "family", "boolean"))
            expect(sendto(42, "msg", {family=-1})).to_raise.any_of {
               "bad argument #3 to '?' (unsupported family type -1)",
               "bad argument #3 to 'sendto' (unsupported family type -1)",
            }
         end
      }
      examples {
         ["it diagnoses wrong AF_INET field types"] = function()
            expect(sendto(42, "msg", {family=M.AF_INET, port=false})).
               to_raise.any_of(typeerrors(3, "int", "port", "boolean"))
            expect(sendto(42, "msg", {family=M.AF_INET, port=9999, addr=false})).
               to_raise.any_of(typeerrors(3, "string", "addr", "boolean"))
         end
      }
      examples {
         ["it diagnoses invalid AF_INET fields"] = function()
            expect(sendto(42, "msg", {
               family=M.AF_INET, port=9999, addr="127.0.0.1", flags=false
            })).to_raise.any_of(typeerrors(3, nil, "flags"))
         end
      }
      examples {
         ["it diagnoses wrong AF_INET6 field types"] = function()
            expect(sendto(42, "msg", {family = M.AF_INET6, port = false})).
               to_raise.any_of(typeerrors(3, "int", "port", "boolean"))
            expect(sendto(42, "msg", {family = M.AF_INET6, port = 9999, addr = false})).
               to_raise.any_of(typeerrors(3, "string", "addr", "boolean"))
         end
      }
      examples {
         ["it diagnoses invalid AF_INET6 fields"] = function()
            expect(sendto(42, "msg", {
               family=M.AF_INET6, port=9999, addr="::", flags=false
            })).to_raise.any_of(typeerrors(3, nil, "flags"))
         end
      }
      examples {
         ["it diagnoses wrong AF_UNIX field types"] = function()
            expect(sendto(42, "msg", {family = M.AF_UNIX, path = false})).
               to_raise.any_of(typeerrors(3, "string", "path", "boolean"))
         end
      }
      examples {
         ["it diagnoses invalid AF_UNIX fields"] = function()
            expect(sendto(42, "msg", {family=M.AF_UNIX, path="/tmp/afunix", port=9999})).
               to_raise.any_of(typeerrors(3, nil, "port"))
         end
      }
      if M.AF_NETLINK then
         examples {
            ["it diagnoses wrong AF_NETLINK field types"] = function()
                 expect(sendto(42, "msg", {family = M.AF_NETLINK, pid = false})).
                    to_raise.any_of(typeerrors(3, "int", "pid", "boolean"))
                 expect(sendto(42, "msg", {family = M.AF_NETLINK, pid = 9999, groups = false})).
                    to_raise.any_of(typeerrors(3, "int", "groups", "boolean"))
            end
         }
         examples {
            ["it diagnoses invalid AF_NETLINK fields"] = function()
               expect(sendto(42, "msg", {family=M.AF_NETLINK, pid=9999, groups=9999, port=9999})).
                  to_raise.any_of(typeerrors(3, nil, "port"))
            end
         }
      end


- describe shutdown:
  - context with bad arguments:
      badargs.diagnose(M.shutdown, "(int, int)")


- describe getsockname:
  - context with bad arguments:
      badargs.diagnose(M.getsockname, "(int)")


- describe getpeername:
  - context with bad arguments:
      badargs.diagnose(M.getpeername, "(int)")


- describe setsockopt:
  - before:
      setsockopt, typeerrors = init(M, "setsockopt")

  - context with bad arguments:
    - 'it diagnoses missing argument #1':
        expect(setsockopt()).to_raise.any_of(typeerrors(1, "int"))
    - 'it diagnoses argument #1 type not int':
        expect(setsockopt(false)).to_raise.any_of(typeerrors(1, "int", "boolean"))
    - 'it diagnoses missing argument #2':
        expect(setsockopt(1)).to_raise.any_of(typeerrors(2, "int"))
    - 'it diagnoses argument #2 type not int':
        expect(setsockopt(1, false)).to_raise.any_of(typeerrors(2, "int", "boolean"))
    - 'it diagnoses missing argument #3':
        expect(setsockopt(1, 2)).to_raise.any_of(typeerrors(3, "int"))
    - 'it diagnoses argument #3 type not int':
        expect(setsockopt(1, 2, false)).to_raise.any_of(typeerrors(3, "int", "boolean"))
    - 'it diagnoses missing argument #4':
        expect(setsockopt(1, M.SOL_SOCKET, M.SO_LINGER)).
           to_raise.any_of(typeerrors(4, "int"))
    - 'it diagnoses argument #4 type not int':
        expect(setsockopt(1, M.SOL_SOCKET, M.SO_LINGER, false)).
           to_raise.any_of(typeerrors(4, "int", "boolean"))
    - 'it diagnoses missing argument #5':
        expect(setsockopt(1, M.SOL_SOCKET, M.SO_LINGER, 4)).
           to_raise.any_of(typeerrors(5, "int"))
    - 'it diagnoses argument #5 type not int':
        expect(setsockopt(1, M.SOL_SOCKET, M.SO_LINGER, 4, false)).
           to_raise.any_of(typeerrors(5, "int", "boolean"))
    - it diagnoses too many arguments:
        expect(setsockopt(1, M.SOL_SOCKET, M.IPPROTO_TCP, 4, false)).
           to_raise.any_of(typeerrors(5))
        expect(setsockopt(1, M.SOL_SOCKET, M.SO_LINGER, 4, 5, false)).
           to_raise.any_of(typeerrors(6))

  - it communicates with IPV4 and IPV6 over loopback: |
      fd = M.socket(M.AF_INET6, M.SOCK_DGRAM, 0)
      expect(type(fd)).to_be "number"
      expect(fd >= 0).to_be(true)

      expect(setsockopt(fd, M.SOL_SOCKET, M.SO_RCVTIMEO, 1, 0)).to_be(0)

      expect(M.bind(fd, {family=M.AF_INET6, addr="::", port=9999})).
         to_be(0)

      pending "not portable"
      sockt = {family=M.AF_INET, addr="127.0.0.1", port=59999}
      expect({M.sendto(fd, "Test ipv4", sockt)}).to_equal.any_of {
         {9},
         {nil, "sendto: Invalid argument", 22},
      }

      pending "issue #92"
      data, so = M.recvfrom(fd, 1024)
      expect(data).to_be "Test ipv4"


- describe getsockopt:
  - before:
      testsock = M.socket(M.AF_INET, M.SOCK_STREAM, 0)

      getsockopt, typeerrors = init(M, "getsockopt")

  - context with bad arguments:
    - 'it diagnoses missing argument #1':
        expect(getsockopt()).to_raise.any_of(typeerrors(1, "int"))
    - 'it diagnoses argument #1 type not int':
        expect(getsockopt(false)).to_raise.any_of(typeerrors(1, "int", "boolean"))
    - 'it diagnoses missing argument #2':
        expect(getsockopt(1)).to_raise.any_of(typeerrors(2, "int"))
    - 'it diagnoses argument #2 type not int':
        expect(getsockopt(1, false)).to_raise.any_of(typeerrors(2, "int", "boolean"))
    - 'it diagnoses missing argument #3':
        expect(getsockopt(1, 2)).to_raise.any_of(typeerrors(3, "int"))
    - 'it diagnoses argument #3 type not int':
        expect(getsockopt(1, 2, false)).to_raise.any_of(typeerrors(3, "int", "boolean"))
    - it diagnoses too many arguments:
        expect(getsockopt(1, M.SOL_SOCKET, M.IPPROTO_TCP, 4)).
           to_raise.any_of(typeerrors(4))
  - it returns a timeval for SO_RCVTIMEO:
      expect(getmetatable(getsockopt(testsock, M.SOL_SOCKET, M.SO_RCVTIMEO))._type).
         to_be("PosixTimeval")
  - it returns a timeval for SO_SNDTIMEO:
      expect(getmetatable(getsockopt(testsock, M.SOL_SOCKET, M.SO_SNDTIMEO))._type).
         to_be("PosixTimeval")
  - it returns a linger struct for SO_LINGER:
      expect(getmetatable(getsockopt(testsock, M.SOL_SOCKET, M.SO_LINGER))._type).
         to_be("PosixLinger")
  - it returns a number for SO_ERROR:
      expect(type(getsockopt(testsock, M.SOL_SOCKET, M.SO_ERROR))).
         to_be("number")
